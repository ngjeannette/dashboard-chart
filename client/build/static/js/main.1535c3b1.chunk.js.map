{"version":3,"sources":["Component/Line.js","Component/Pie.js","Component/Bar.js","Component/Nav.js","Component/Home.js","App.js","reportWebVitals.js","index.js"],"names":["Chart","defaults","global","defaultFontFamily","legend","display","elements","line","tension","LineGraph","chartRef","React","createRef","myChartRef","this","current","getContext","graphWidth","canvas","width","gradientLine","createLinearGradient","addColorStop","props","data","labels","color","type","datasets","label","fill","barPercentage","barThickness","maxBarThickness","minBarLength","borderColor","options","responsive","maintainAspectRatio","scales","xAxes","ticks","gridLines","drawBorder","yAxes","id","ref","Component","backgroundColor","hoverBorderColor","hoverBackgroundColor","console","log","Nav","className","style","height","position","to","padding","Container","styled","div","ChartContainer","HomeContainer","Home","useState","chartType","setChartType","chartData","setChartData","isLoading","setIsLoading","save","setSave","useEffect","i","localStorage","length","localStorageValue","getItem","key","includes","storedValue","JSON","parse","chartQuery","getChartTypeLocalStorage","saveToLocalStorage","dataArray","stringDataArray","stringify","setItem","a","graphqlQuery","graphqlValue","chart","passArg","query","fetch","method","headers","body","then","r","json","chartDelete","index","splice","graphqlMutationDelete","deleteChart","mutation","chartAdd","charTypeItem","graphqlMutationAdd","addChart","boxShadow","map","onClick","e","minHeight","randomNumber","Math","floor","random","App","exact","path","render","isAuthed","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"uUAGAA,IAAMC,SAASC,OAAOC,kBAAoB,wBAC1CH,IAAMC,SAASC,OAAOE,OAAOC,SAAU,EACvCL,IAAMC,SAASC,OAAOI,SAASC,KAAKC,QAAU,G,IAEzBC,E,4MACnBC,SAAWC,IAAMC,Y,kEAGf,IAAMC,EAAaC,KAAKJ,SAASK,QAAQC,WAAW,MACrCC,EAAeJ,EAAWK,OAAjCC,MACJC,EAAeP,EAAWQ,qBAAqB,EAAG,EAAgB,EAAbJ,EAAgB,GACzEG,EAAaE,aAAa,EAAG,WAC7BF,EAAaE,aAAa,EAAG,WALX,MAMcR,KAAKS,MAAMC,KAAnCA,EANU,EAMVA,KAAaC,GANH,EAMJC,MANI,EAMGD,QAErB,IAAIzB,IAAMa,EAAY,CACpBc,KAAM,OACNH,KAAM,CAEJC,OAAQA,EACRG,SAAU,CACR,CACEC,MAAO,QACPL,KAAMA,EACNM,MAAM,EACNC,cAAe,GACfC,aAAc,EACdC,gBAAiB,EACjBC,aAAc,EACdC,YAAa,aAInBC,QAAS,CACPC,YAAY,EACZC,qBAAqB,EAErBC,OAAQ,CACNC,MAAO,CACL,CACEC,MAAO,CAAEpC,SAAS,GAClBqC,UAAW,CACTrC,SAAS,EACTsC,YAAY,KAIlBC,MAAO,CACL,CACEH,MAAO,CAAEpC,SAAS,GAClBqC,UAAW,CACTrC,SAAS,EACTsC,YAAY,W,+BASxB,OACE,8BACE,wBAAQE,GAAG,UAAUC,IAAKhC,KAAKJ,iB,GA3DAqC,aCJvC/C,IAAMC,SAASC,OAAOC,kBAAoB,wBAC1CH,IAAMC,SAASC,OAAOE,OAAOC,SAAU,EACvCL,IAAMC,SAASC,OAAOI,SAASC,KAAKC,QAAU,G,IAEzBC,E,4MACnBC,SAAWC,IAAMC,Y,kEAGf,IAAMC,EAAaC,KAAKJ,SAASK,QAAQC,WAAW,MACrCC,EAAeJ,EAAWK,OAAjCC,MACJC,EAAeP,EAAWQ,qBAAqB,EAAG,EAAgB,EAAbJ,EAAgB,GACzEG,EAAaE,aAAa,EAAG,WAC7BF,EAAaE,aAAa,EAAG,WALX,MAMcR,KAAKS,MAAMC,KAAnCA,EANU,EAMVA,KAAME,EANI,EAMJA,MAAOD,EANH,EAMGA,OAErB,IAAIzB,IAAMa,EAAY,CACpBc,KAAM,MACNH,KAAM,CACJI,SAAU,CACR,CACEJ,KAAMA,EACNwB,gBAAiBtB,EACjBS,YAAa,QACbc,iBAAkB,UAClBC,qBAAsBxB,IAI1BD,OAAQA,GAEVW,QAAS,CACPC,YAAY,EACZC,qBAAqB,O,+BAKzB,OACE,8BACE,wBAAQO,GAAG,UAAUC,IAAKhC,KAAKJ,iB,GAnCAqC,aCJvC/C,IAAMC,SAASC,OAAOC,kBAAoB,wBAC1CH,IAAMC,SAASC,OAAOE,OAAOC,SAAU,EACvCL,IAAMC,SAASC,OAAOI,SAASC,KAAKC,QAAU,G,IAEzBC,E,4MACnBC,SAAWC,IAAMC,Y,kEAGf,IAAMC,EAAaC,KAAKJ,SAASK,QAAQC,WAAW,MACrCC,EAAeJ,EAAWK,OAAjCC,MACJC,EAAeP,EAAWQ,qBAAqB,EAAG,EAAgB,EAAbJ,EAAgB,GACzEG,EAAaE,aAAa,EAAG,WAC7BF,EAAaE,aAAa,EAAG,WAC7B6B,QAAQC,IAAItC,KAAKS,OANC,MAOcT,KAAKS,MAAMC,KAAnCA,EAPU,EAOVA,KAAME,EAPI,EAOJA,MAAOD,EAPH,EAOGA,OAErB,IAAIzB,IAAMa,EAAY,CACpBc,KAAM,MACNH,KAAM,CAEJC,OAAQA,EACRG,SAAU,CACR,CACEJ,KAAMA,EACNM,MAAM,EACNC,cAAe,GACfC,aAAc,EACdC,gBAAiB,EACjBC,aAAc,EACdc,gBAAiBtB,KAIvBU,QAAS,CACPC,YAAY,EAEZC,qBAAqB,EACrBC,OAAQ,CACNC,MAAO,CACL,CACEC,MAAO,CAAEpC,SAAS,GAClBqC,UAAW,CACTrC,SAAS,EACTsC,YAAY,KAIlBC,MAAO,CACL,CACEH,MAAO,CAAEpC,SAAS,GAClBqC,UAAW,CACTrC,SAAS,EACTsC,YAAY,W,+BASxB,OACE,8BACE,wBAAQE,GAAG,UAAUC,IAAKhC,KAAKJ,iB,GA3DAqC,aCYxBM,MAdf,WACE,OACE,sBAAKC,UAAU,QAAQC,MAAO,CAAEC,OAAQ,OAAQC,SAAU,SAA1D,UACE,mBAAGH,UAAU,gBAAb,sBACA,cAAC,IAAD,CACEI,GAAG,IACHJ,UAAU,wBACVC,MAAO,CAAEI,QAAS,eAHpB,SAKE,sBAAML,UAAU,aAAhB,wB,ocCRR,IAAMM,EAAYC,IAAOC,IAAV,KAOTC,EAAiBF,IAAOC,IAAV,KAMdE,EAAgBH,IAAOC,IAAV,KAwQJG,MA5Pf,WAAiB,IAAD,EACoBC,mBAAS,CAAC,OAAQ,MAAO,MAAO,QADpD,mBACPC,EADO,KACIC,EADJ,OAEoBF,mBAAS,IAF7B,mBAEPG,EAFO,KAEIC,EAFJ,OAGoBJ,oBAAS,GAH7B,mBAGPK,EAHO,KAGIC,EAHJ,OAIUN,oBAAS,GAJnB,mBAIPO,EAJO,KAIDC,EAJC,KAMdC,qBAAU,YA+BV,WACE,IAAK,IAAIC,EAAI,EAAGA,EAAIC,aAAaC,OAAQF,IAAK,CAC5C,IAAIG,EAAoBF,aAAaG,QAAQH,aAAaI,IAAIL,IAE9D,GADsBC,aAAaI,IAAIL,GACnBM,SAAS,aAAc,CACzC,IAAIC,EAAcC,KAAKC,MAAMN,GACzBI,EAAW,YACbf,EAAae,EAAW,WACxBG,OApCNC,KACC,IAEHZ,qBAAU,WACJF,GACFe,MAED,CAACf,IAGJ,IAQMe,EAAqB,WACzB,IACIC,EAAY,GAChBA,EAAS,UAAgBtB,EACzB,IAAMuB,EAAkBN,KAAKO,UAAUF,GACvCZ,aAAae,QAJG,gBAIiBF,GACjChB,GAAQ,IAmBJY,EAAU,uCAAG,4BAAAO,EAAA,sEACUC,IADV,OACXC,EADW,OAEjBzB,EAAayB,EAAaC,OAC1BxB,GAAa,GAHI,2CAAH,qDAMVsB,EAAe,WACnB,IAAMG,EAAUb,KAAKO,UAAUxB,GACzB+B,EAAK,8CAEYD,EAFZ,mFAUX,OAAOE,MAAM,WAAY,CACvBC,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMlB,KAAKO,UAAU,CACnBO,YAIDK,MAAK,SAACC,GACL,OAAOA,EAAEC,UAEVF,MAAK,SAAC/E,GACL,OAAOA,EAAKA,SAKZkF,EAAW,uCAAG,WAAOC,GAAP,eAAAd,EAAA,6DAClB1B,EAAUyC,OAAOD,EAAO,GADN,SAEZvC,EAAaD,GAFD,uBAGS0C,EAAsBF,GAH/B,OAGZZ,EAHY,OAIlBzB,EAAayB,EAAavE,KAAKsF,aAC/BpC,GAAQ,GALU,2CAAH,sDAQXmC,EAAwB,SAACF,GAC7B,IAAMV,EAAUb,KAAKO,UAAUgB,GAEzBI,EAAQ,4EAGAd,EAHA,8FAWd,OAAOE,MAAM,WAAY,CACvBC,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMlB,KAAKO,UAAU,CACnBO,MAAOa,MAGRR,MAAK,SAACC,GACL,OAAOA,EAAEC,UAEVF,MAAK,SAAC/E,GACL,OAAOA,MAKPwF,EAAQ,uCAAG,WAAOC,GAAP,eAAApB,EAAA,sEACYqB,EAAmBD,GAD/B,OACTlB,EADS,OAEfzB,EAAayB,EAAavE,KAAK2F,UAC/B/C,EAAa,GAAD,mBAAKD,GAAL,CAAgB8C,KAC5BvC,GAAQ,GAJO,2CAAH,sDAORwC,EAAqB,SAACD,GAC1B,IAAMhB,EAAUb,KAAKO,UAAUsB,GACzBF,EAAQ,iFAGQd,EAHR,8FAWd,OAAOE,MAAM,WAAY,CACvBC,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMlB,KAAKO,UAAU,CACnBO,MAAOa,MAGRR,MAAK,SAACC,GACL,OAAOA,EAAEC,UAEVF,MAAK,SAAC/E,GACL,OAAOA,MAUb,OACE,eAACwC,EAAD,WACE,cAAC,EAAD,IACA,eAACJ,EAAD,CAAWN,UAAU,YAArB,UACE,qBACEA,UAAU,sBACVC,MAAO,CAAEpC,MAAO,OAAQqC,OAAQ,OAAQ4D,UAAW,QAFrD,uCAME7C,GACAJ,EAAUW,OAAS,GACnBT,EAAUS,OAAS,GACnBX,EAAUkD,KAAI,SAACrB,EAAOW,GACpB,MAAa,OAATX,EAEA,eAACjC,EAAD,WACE,cAAC,EAAD,CAAKvC,KAAM6C,EAAUsC,KACrB,wBACErD,UAAU,+BACVC,MAAO,CAAEC,OAAQ,eACjB8D,QAAS,SAACC,GACRb,EAAYC,IAJhB,SAOE,mBAAGrD,UAAU,yBATIqD,GAaL,OAATX,EAEP,eAACjC,EAAD,WACE,cAAC,EAAD,CAAKvC,KAAM6C,EAAUsC,KACrB,wBACErD,UAAU,+BACVC,MAAO,CAAEC,OAAQ,eACjB8D,QAAS,SAACC,GACRb,EAAYC,IAJhB,SAOE,mBAAGrD,UAAU,yBATIqD,GAaL,QAATX,EAEP,eAACjC,EAAD,WACE,cAAC,EAAD,CAAMvC,KAAM6C,EAAUsC,KACtB,wBACErD,UAAU,+BACVC,MAAO,CAAEC,OAAQ,eAEjB8D,QAAS,SAACC,GACRb,EAAYC,IALhB,SAQE,mBAAGrD,UAAU,sBALRqD,KALYA,QAFlB,MAkBTpC,GAAaJ,EAAUW,OAAS,IAChC,cAACf,EAAD,UACE,yBACET,UAAU,gCACVC,MAAO,CAAEpC,MAAO,OAAQqC,OAAQ,OAAQgE,UAAW,SACnDF,QAzEW,WACrB,IAAIG,EAAeC,KAAKC,MAAMD,KAAKE,SAAWF,KAAKC,MAAM,IAEzDX,EADgB,CAAC,OAAQ,MAAO,OACbS,KAmEX,UAKE,sBAAMnE,UAAU,gBAAhB,SACE,mBAAGA,UAAU,kBAEf,qDCnQCuE,MAZf,WACE,OACE,cAAC,IAAD,UACE,cAAC,IAAD,CACEC,OAAK,EACLC,KAAK,IACLC,OAAQ,SAACzG,GAAD,OAAW,cAAC,EAAD,2BAAUA,GAAV,IAAiB0G,UAAU,WCEvCC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB7B,MAAK,YAAkD,IAA/C8B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASV,OACP,cAAC,IAAMW,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.1535c3b1.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport Chart from \"chart.js\";\n\nChart.defaults.global.defaultFontFamily = \"'PT Sans', sans-serif\";\nChart.defaults.global.legend.display = false;\nChart.defaults.global.elements.line.tension = 0.2;\n\nexport default class LineGraph extends Component {\n  chartRef = React.createRef();\n\n  componentDidMount() {\n    const myChartRef = this.chartRef.current.getContext(\"2d\");\n    const { width: graphWidth } = myChartRef.canvas;\n    let gradientLine = myChartRef.createLinearGradient(0, 0, graphWidth * 2, 0);\n    gradientLine.addColorStop(0, \"#FF006E\");\n    gradientLine.addColorStop(1, \"#F46036\");\n    const { data, color, labels } = this.props.data;\n\n    new Chart(myChartRef, {\n      type: \"line\",\n      data: {\n        //Bring in data\n        labels: labels,\n        datasets: [\n          {\n            label: \"sales\",\n            data: data,\n            fill: false,\n            barPercentage: 0.5,\n            barThickness: 6,\n            maxBarThickness: 8,\n            minBarLength: 2,\n            borderColor: \"#6610f2\",\n          },\n        ],\n      },\n      options: {\n        responsive: true,\n        maintainAspectRatio: false,\n\n        scales: {\n          xAxes: [\n            {\n              ticks: { display: true },\n              gridLines: {\n                display: false,\n                drawBorder: true,\n              },\n            },\n          ],\n          yAxes: [\n            {\n              ticks: { display: true },\n              gridLines: {\n                display: false,\n                drawBorder: true,\n              },\n            },\n          ],\n        },\n      },\n    });\n  }\n  render() {\n    return (\n      <div>\n        <canvas id=\"myChart\" ref={this.chartRef} />\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport Chart from \"chart.js\";\n\nChart.defaults.global.defaultFontFamily = \"'PT Sans', sans-serif\";\nChart.defaults.global.legend.display = false;\nChart.defaults.global.elements.line.tension = 0.2;\n\nexport default class LineGraph extends Component {\n  chartRef = React.createRef();\n\n  componentDidMount() {\n    const myChartRef = this.chartRef.current.getContext(\"2d\");\n    const { width: graphWidth } = myChartRef.canvas;\n    let gradientLine = myChartRef.createLinearGradient(0, 0, graphWidth * 2, 0);\n    gradientLine.addColorStop(0, \"#FF006E\");\n    gradientLine.addColorStop(1, \"#F46036\");\n    const { data, color, labels } = this.props.data;\n\n    new Chart(myChartRef, {\n      type: \"pie\",\n      data: {\n        datasets: [\n          {\n            data: data,\n            backgroundColor: color,\n            borderColor: \"black\",\n            hoverBorderColor: \"#fafafa\",\n            hoverBackgroundColor: color,\n          },\n        ],\n        // These labels appear in the legend and in the tooltips when hovering different arcs\n        labels: labels,\n      },\n      options: {\n        responsive: true,\n        maintainAspectRatio: false,\n      },\n    });\n  }\n  render() {\n    return (\n      <div>\n        <canvas id=\"myChart\" ref={this.chartRef} />\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport Chart from \"chart.js\";\n\nChart.defaults.global.defaultFontFamily = \"'PT Sans', sans-serif\";\nChart.defaults.global.legend.display = false;\nChart.defaults.global.elements.line.tension = 0.2;\n\nexport default class LineGraph extends Component {\n  chartRef = React.createRef();\n\n  componentDidMount() {\n    const myChartRef = this.chartRef.current.getContext(\"2d\");\n    const { width: graphWidth } = myChartRef.canvas;\n    let gradientLine = myChartRef.createLinearGradient(0, 0, graphWidth * 2, 0);\n    gradientLine.addColorStop(0, \"#FF006E\");\n    gradientLine.addColorStop(1, \"#F46036\");\n    console.log(this.props);\n    const { data, color, labels } = this.props.data;\n\n    new Chart(myChartRef, {\n      type: \"bar\",\n      data: {\n        //Bring in data\n        labels: labels,\n        datasets: [\n          {\n            data: data,\n            fill: true,\n            barPercentage: 0.5,\n            barThickness: 6,\n            maxBarThickness: 8,\n            minBarLength: 2,\n            backgroundColor: color,\n          },\n        ],\n      },\n      options: {\n        responsive: true,\n\n        maintainAspectRatio: true,\n        scales: {\n          xAxes: [\n            {\n              ticks: { display: true },\n              gridLines: {\n                display: false,\n                drawBorder: true,\n              },\n            },\n          ],\n          yAxes: [\n            {\n              ticks: { display: true },\n              gridLines: {\n                display: false,\n                drawBorder: true,\n              },\n            },\n          ],\n        },\n      },\n    });\n  }\n  render() {\n    return (\n      <div>\n        <canvas id=\"myChart\" ref={this.chartRef} />\n      </div>\n    );\n  }\n}\n","/*eslint-disable */\nimport React, { useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\n// <Link to=\"/\"> Home </Link>\n\nfunction Nav() {\n  return (\n    <nav className=\"panel\" style={{ height: \"100%\", position: \"fixed\" }}>\n      <p className=\"panel-heading\">Chart.js</p>\n      <Link\n        to=\"/\"\n        className=\"panel-block is-active\"\n        style={{ padding: \".75em 1.4em\" }}\n      >\n        <span className=\"panel-icon\">Home</span>\n      </Link>\n    </nav>\n  );\n}\nexport default Nav;\n","import React, { useEffect, useState } from \"react\";\nimport Line from \"./Line\";\nimport Pie from \"./Pie\";\nimport Bar from \"./Bar\";\nimport Nav from \"./Nav\";\nimport styled from \"@emotion/styled\";\nconst Container = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  width: 100%;\n  margin-left: 115px;\n  max-width: calc(100% - 115px) !important;\n`;\nconst ChartContainer = styled.div`\n  width: calc(50% - 40px);\n  display: flex;\n  justify-content: center;\n  margin: 20px;\n`;\nconst HomeContainer = styled.div`\n  display: flex;\n`;\n\n// sample data set: for line, pie, pie, bar\n// const idealData = [\n//   { data: [86, 67, 91, 100, 123, 3, 10, 47, 12, 467, 7, 23], labels: [\"Jan\", \"Feb\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"], },\n//   { color: ['red', 'blue', 'yellow'], labels: ['a', 'b', 'c'], data: [12, 27, 1] },\n//   { color: ['red', 'blue', 'yellow'], labels: ['e', 'f', 'g'], data: [1, 2, 3] },\n//   { data: [86, 67, 91, 100, 123, 3, 10, 47, 12, 467, 7, 23], labels: [\"Jan\", \"Feb\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"], },\n// ];\n\nfunction Home() {\n  const [chartType, setChartType] = useState([\"line\", \"pie\", \"pie\", \"bar\"]);\n  const [chartData, setChartData] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [save, setSave] = useState(false);\n\n  useEffect(() => {\n    // uncomment reset to restart\n    // reset();\n    getChartTypeLocalStorage();\n  }, []);\n\n  useEffect(() => {\n    if (save) {\n      saveToLocalStorage();\n    }\n  }, [save]);\n\n  // call this to reset the bar chare [line, pie, pie, bar] on localStorage and reset the server.js\n  const reset = () => {\n    let dataArray = {};\n    dataArray[\"chartType\"] = [\"line\", \"pie\", \"pie\", \"bar\"];\n    const stringDataArray = JSON.stringify(dataArray);\n    localStorage.setItem(\"key_chartType\", stringDataArray);\n  };\n\n  // save current charts to localstorage\n  const saveToLocalStorage = () => {\n    const identifier = `key_chartType`;\n    let dataArray = {};\n    dataArray[\"chartType\"] = chartType;\n    const stringDataArray = JSON.stringify(dataArray);\n    localStorage.setItem(identifier, stringDataArray);\n    setSave(false);\n  };\n\n  // get chartType from local storage\n  function getChartTypeLocalStorage() {\n    for (var i = 0; i < localStorage.length; i++) {\n      let localStorageValue = localStorage.getItem(localStorage.key(i));\n      let localStorageKey = localStorage.key(i);\n      if (localStorageKey.includes(\"chartType\")) {\n        let storedValue = JSON.parse(localStorageValue);\n        if (storedValue[\"chartType\"]) {\n          setChartType(storedValue[\"chartType\"]);\n          chartQuery();\n        }\n      }\n    }\n  }\n\n  //graphql operation\n  const chartQuery = async () => {\n    const graphqlValue = await graphqlQuery();\n    setChartData(graphqlValue.chart);\n    setIsLoading(false);\n  };\n\n  const graphqlQuery = () => {\n    const passArg = JSON.stringify(chartType);\n    const query = `\n      {\n        chart (chartType:${passArg}){\n          labels\n          data\n          color\n        }\n      }\n    `;\n\n    return fetch(\"/graphql\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        query,\n        // variables: { chartType },\n      }),\n    })\n      .then((r) => {\n        return r.json();\n      })\n      .then((data) => {\n        return data.data;\n      });\n  };\n\n  //graphqlMutation operation to delete\n  const chartDelete = async (index) => {\n    chartType.splice(index, 1);\n    await setChartType(chartType);\n    const graphqlValue = await graphqlMutationDelete(index);\n    setChartData(graphqlValue.data.deleteChart);\n    setSave(true);\n  };\n\n  const graphqlMutationDelete = (index) => {\n    const passArg = JSON.stringify(index);\n\n    const mutation = `\n      mutation {\n        deleteChart(chart: {\n          index:${passArg}\n        }){\n          labels\n          data\n          color\n        }\n      }\n    `;\n    return fetch(\"/graphql\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        query: mutation,\n      }),\n    })\n      .then((r) => {\n        return r.json();\n      })\n      .then((data) => {\n        return data;\n      });\n  };\n\n  //graphqlMutation operation to add\n  const chartAdd = async (charTypeItem) => {\n    const graphqlValue = await graphqlMutationAdd(charTypeItem);\n    setChartData(graphqlValue.data.addChart);\n    setChartType([...chartType, charTypeItem]);\n    setSave(true);\n  };\n\n  const graphqlMutationAdd = (charTypeItem) => {\n    const passArg = JSON.stringify(charTypeItem);\n    const mutation = `\n      mutation {\n        addChart(chart: {\n          chartTypeItem:${passArg}\n        }){\n          labels\n          data\n          color\n        }\n      }\n    `;\n    return fetch(\"/graphql\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        query: mutation,\n      }),\n    })\n      .then((r) => {\n        return r.json();\n      })\n      .then((data) => {\n        return data;\n      });\n  };\n\n  const handleClickAdd = () => {\n    let randomNumber = Math.floor(Math.random() * Math.floor(3));\n    let allCharts = [\"line\", \"pie\", \"bar\"];\n    chartAdd(allCharts[randomNumber]);\n  };\n\n  return (\n    <HomeContainer>\n      <Nav />\n      <Container className=\"container\">\n        <div\n          className=\"panel panel-heading\"\n          style={{ width: \"100%\", height: \"55px\", boxShadow: \"none\" }}\n        >\n          View, Add, Delete Charts\n        </div>\n        {!isLoading &&\n          chartType.length > 0 &&\n          chartData.length > 0 &&\n          chartType.map((chart, index) => {\n            if (chart == \"bar\") {\n              return (\n                <ChartContainer key={index}>\n                  <Bar data={chartData[index]} />\n                  <button\n                    className=\"button is-danger is-outlined\"\n                    style={{ height: \"fit-content\" }}\n                    onClick={(e) => {\n                      chartDelete(index);\n                    }}\n                  >\n                    <i className=\"fas fa-trash-alt\"></i>\n                  </button>\n                </ChartContainer>\n              );\n            } else if (chart == \"pie\") {\n              return (\n                <ChartContainer key={index}>\n                  <Pie data={chartData[index]} />\n                  <button\n                    className=\"button is-danger is-outlined\"\n                    style={{ height: \"fit-content\" }}\n                    onClick={(e) => {\n                      chartDelete(index);\n                    }}\n                  >\n                    <i className=\"fas fa-trash-alt\"></i>\n                  </button>\n                </ChartContainer>\n              );\n            } else if (chart == \"line\") {\n              return (\n                <ChartContainer key={index}>\n                  <Line data={chartData[index]} />\n                  <button\n                    className=\"button is-danger is-outlined\"\n                    style={{ height: \"fit-content\" }}\n                    key={index}\n                    onClick={(e) => {\n                      chartDelete(index);\n                    }}\n                  >\n                    <i className=\"fas fa-trash-alt\"></i>\n                  </button>\n                </ChartContainer>\n              );\n            }\n          })}\n        {!isLoading && chartType.length < 10 && (\n          <ChartContainer>\n            <button\n              className=\"button is-success is-outlined\"\n              style={{ width: \"100%\", height: \"100%\", minHeight: \"157px\" }}\n              onClick={handleClickAdd}\n            >\n              <span className=\"icon is-small\">\n                <i className=\"fas fa-plus\"></i>\n              </span>\n              <span>Chart</span>\n            </button>\n          </ChartContainer>\n        )}\n      </Container>\n    </HomeContainer>\n  );\n}\nexport default Home;\n","import \"./App.css\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport Home from \"./Component/Home\";\n\nfunction App() {\n  return (\n    <Router>\n      <Route\n        exact\n        path=\"/\"\n        render={(props) => <Home {...props} isAuthed={true} />}\n      />\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}